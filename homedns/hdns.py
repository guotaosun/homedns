#!/usr/bin/env python
# -*- encoding:utf-8 -*-

import os.path
import argparse
import logging
import time
import json
import threading
from collections import OrderedDict

import netaddr

from . import globalvars
from . import transport
from .domain import Domain, HostDomain
from .loader import TxtLoader, JsonLoader
from .adblock import Adblock
from .iniconfig import ini_read, ini_write
from .dhcp import getdns


def init_config(args):
    globalvars.init()

    globalvars.dig = args.dig
    globalvars.config_dir = os.path.abspath(os.path.dirname(args.config))
    os.makedirs(globalvars.config_dir, exist_ok=True)

    globalvars.log_dir = os.path.join(globalvars.config_dir, 'log')
    os.makedirs(globalvars.log_dir, exist_ok=True)
    config_file = os.path.join(globalvars.config_dir, os.path.basename(args.config))
    if os.path.exists(config_file):
        globalvars.config = ini_read(config_file)
    elif os.path.basename(config_file) == 'homedns.ini':
        print('Could not find config "%s", use default...' % config_file)
        globalvars.config = {
            'log': globalvars.defaults.log,
            'server': globalvars.defaults.server,
            'smartdns': globalvars.defaults.smartdns,
            'domains': globalvars.defaults.domains,
        }
        ini_write(globalvars.config, config_file)
    else:
        raise TypeError('Unknown config file: %s' % config_file)

    if args.quiet:
        log_level = logging.ERROR
    elif args.verbose:
        log_level = logging.WARNING - (args.verbose * 10)
    else:
        log_level = globalvars.config['log']['level']
    if log_level == logging.DEBUG:
        log_level2 = logging.DEBUG
    else:
        log_level2 = log_level - 10
    log_file = os.path.join(
        globalvars.log_dir,
        globalvars.config['log']['file']
    )
    formatter = logging.Formatter('%(message)s')
    if log_level2 == logging.DEBUG:
        formatter2 = logging.Formatter('[%(name)s %(lineno)d] %(message)s')
    else:
        formatter2 = formatter

    file_handler = logging.handlers.TimedRotatingFileHandler(
        filename=log_file,
        when='D',
        interval=1,
        backupCount=7,
        utc=False,
    )
    file_handler.setFormatter(formatter2)
    file_handler.setLevel(log_level2)
    file_handler.doRollover()

    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    console_handler.setLevel(log_level)

    if '.' in __name__:
        app_logger = logging.getLogger(__name__.partition('.')[0])
    else:
        app_logger = logging.getLogger('homedns')
    app_logger.setLevel(logging.DEBUG)
    app_logger.addHandler(file_handler)
    app_logger.addHandler(console_handler)

    app_logger.warn('HomeDNS v%s' % globalvars.version)
    app_logger.warn('Config file: %s' % config_file)
    app_logger.warn('Log file: %s' % log_file)
    app_logger.debug('Config: %s', globalvars.config)

    global logger
    if '.' in __name__:
        logger = logging.getLogger(__name__)
    else:
        logger = logging.getLogger('homedns.' + __name__)

    proxy = globalvars.config['smartdns']['proxy']

    # bogus nxdomain
    globalvars.bogus_nxdomain = netaddr.IPSet()
    bogus = globalvars.config['smartdns']['bogus_nxdomain']
    name = 'bogus_nxdomain'
    loader = TxtLoader(
        bogus['url'],
        name=name,
        proxy=proxy if bogus['proxy'] else None,
    )
    message = 'Add bogus-nxdomain "%s" - %s' % (name, loader)
    if bogus['hack_ip']:
        message += ' with HACK IP %s.' % bogus['hack_ip']
    logger.warn(message)
    if loader.local and not os.path.exists(loader.url):
        with open(loader.url, 'w') as f:
            f.write('# Generated by HomeDNS v%s\n' % globalvars.version)
            f.write('# Example:\n')
            f.write('#   192.168.1.0/24\n')
            f.write('#   192.168.2.10-100\n')
            f.write('#   192.168.3.*\n')
            f.write('#   192.168.*.*\n')
    try:
        loader_io = loader.open(cache=True)
    except Exception as err:
        logger.error('Load %s error: %s' % (name, err))
    for line in iter(loader_io.readline, ''):
        line = line.strip()
        if not line or line.startswith('#'):
            continue
        logger.warn('\t%s' % line)
        if '*' in line or '-' in line:
            globalvars.bogus_nxdomain.add(netaddr.IPGlob(line))
        elif '/' in line:
            globalvars.bogus_nxdomain.add(netaddr.IPNetwork(line))
        else:
            globalvars.bogus_nxdomain.add(line)

    # upstream dns server
    upstreams = globalvars.upstreams = {}
    dhcp_dnssvr = []
    logger.warn('Find DNS Groups:')
    for name, value in globalvars.config['smartdns']['upstreams'].items():
        upstreams[name] = []
        dnssvr = list(value['ip'])
        while dnssvr:
            ip = dnssvr.pop()
            if ip.lower() == 'dhcp':
                if not dhcp_dnssvr:
                    dhcp_dnssvr = getdns(retry=3)
                    if not dhcp_dnssvr:
                        logger.error('\tCould not catch DNS server from DHCP!!!')
                dnssvr += dhcp_dnssvr
                continue
            server = value.copy()
            server['ip'] = ip
            upstreams[name].append(server)

        [dns for dns in upstreams[name]],
        logger.warn('\t%s: %s' % (
            name,
            ['%(ip)s:%(port)s(%(priority)s)' % dns for dns in upstreams[name]],
        ))

    # rules
    globalvars.rules = OrderedDict()
    for rule in globalvars.config['smartdns']['rules']:
        name = rule['name']
        loader = TxtLoader(
            rule['url'],
            name=rule['name'],
            proxy=proxy if rule['proxy'] else None,
        )
        if loader.local and not os.path.exists(loader.url):
            if name == 'default' and rule['url'] == 'default.rules':
                with open(loader.url, 'w') as f:
                    f.write('! Generated by HomeDNS v%s\n' % globalvars.version)
                    f.write('! match all domains\n')
                    f.write('*.*\n')
            else:
                raise OSError('Not found Rule %s: %s' % (
                    name,
                    loader.url,
                ))
        logger.warn('Add rules "%s" - %s' % (name, loader))
        ab = Adblock(name)
        ab.create(loader)
        dns_group = [dns for dns in rule['dns'] if dns in upstreams]
        logger.debug('\tblock list:\n\t\t' + '\n\t\t'.join(ab.output_list()))
        logger.warn('\twith DNS group: %s' % dns_group)
        globalvars.rules[name] = {
            'rule': ab,
            'upstreams': dns_group,
            'refresh': rule['refresh'],
        }

    # allowed hosts
    globalvars.allowed_hosts = netaddr.IPSet()
    logger.warn('Allowed hosts:')
    for hosts in globalvars.config['server']['allowed_hosts']:
        logger.warn('\t%s' % hosts)
        if '*' in hosts or '-' in hosts:
            globalvars.allowed_hosts.add(netaddr.IPGlob(hosts))
        elif '/' in hosts:
            globalvars.allowed_hosts.add(netaddr.IPNetwork(hosts))
        else:
            globalvars.allowed_hosts.add(hosts)

    # local domains
    globalvars.local_domains = {}
    for domain in globalvars.config['domains']:
        if domain['type'] == 'hosts':
            loader = TxtLoader(
                domain['url'],
                name=domain['name'],
                proxy=proxy if domain['proxy'] else None,
            )
            if loader.local and not os.path.exists(loader.url):
                if domain['name'] == 'hosts.homedns' and domain['url'] == 'hosts.homedns':
                    with open(loader.url, 'w') as f:
                        f.write('# Generated by HomeDNS v%s\n' % globalvars.version)
                        for host in globalvars.defaults.hosts_homedns:
                            f.write('%(ip)s\t%(name)s\n' % host)
                else:
                    raise OSError('Not found Domain %s: %s' % (
                        domain['name'],
                        loader.url,
                    ))
            logger.warn('Add domain %s - %s' % (domain['name'], loader))
            try:
                d = HostDomain(domain['name'])
                d.create(loader)
            except Exception as err:
                logger.error(err)
        elif domain['type'] == 'dns':
            loader = JsonLoader(
                domain['url'],
                name=domain['name'],
                proxy=proxy if domain['proxy'] else None,
            )
            if loader.local and not os.path.exists(loader.url):
                if domain['name'] == 'mylocal.home' and domain['url'] == 'mylocal.home.json':
                    json.dump(
                        globalvars.defaults.mylocal_home,
                        open(loader.url, 'w'),
                        indent=4,
                    )
                else:
                    raise OSError('Not found Domain %s: %s' % (
                        domain['name'],
                        loader.url,
                    ))
            logger.warn('Add domain %s - %s' % (domain['name'], loader))
            try:
                d = Domain(domain['name'])
                d.create(loader)
            except Exception as err:
                logger.error(err)
        logger.debug('Records:\n\t' + '\n\t'.join(d.output_records()))
        globalvars.local_domains[domain['name']] = {
            'domain': d,
            'refresh': domain['refresh'],
        }


def run():
    parser = argparse.ArgumentParser()
    parser.add_argument('--version', action='version',
                        version='%%(prog)s %s' % globalvars.version)
    parser.add_argument('-v', '--verbose', help='verbose output', action='count')
    parser.add_argument('-q', '--quiet', action='store_true', help='no verbose, except Error')
    parser.add_argument(
        '--config',
        help='read config from file',
        default='homedns.ini',
    )

    parser.add_argument(
        '--dig',
        action='store_true',
        help='dig format output',
    )
    args = parser.parse_args()

    init_config(args)

    logger.warn("Starting nameserver...")

    binds = globalvars.config['server']['binds']

    servers = []
    for bind in binds:
        logger.warn('Listen on %(protocol)s://%(ip)s:%(port)s' % bind)
        if 'udp' == bind['protocol']:
            servers.append(
                transport.ThreadingUDPServer((bind['ip'], bind['port']), transport.UDPRequestHandler)
            )
        if 'tcp' == bind['protocol']:
            servers.append(
                transport.ThreadingTCPServer((bind['ip'], bind['port']), transport.TCPRequestHandler),
            )

    for s in servers:
        # that thread will start one more thread for each request
        thread = threading.Thread(target=s.serve_forever)
        # exit the server thread when the main thread terminates
        thread.daemon = True
        thread.start()
        logger.warn("%s server loop running in thread: %s" % (
            s.RequestHandlerClass.__name__[:3],
            thread.name
        ))

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        pass
    finally:
        for s in servers:
            s.shutdown()


if __name__ == '__main__':
    run()
